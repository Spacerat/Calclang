# Generated from ExprLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,218,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,0,5,0,70,8,0,10,0,12,0,73,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,
        1,81,8,1,10,1,12,1,84,9,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,104,8,4,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
        1,24,3,24,152,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
        162,8,24,1,24,1,24,1,24,1,24,1,24,3,24,169,8,24,1,25,3,25,172,8,
        25,1,25,1,25,5,25,176,8,25,10,25,12,25,179,9,25,1,25,3,25,182,8,
        25,1,26,1,26,1,26,1,26,1,27,1,27,5,27,190,8,27,10,27,12,27,193,9,
        27,1,28,1,28,5,28,197,8,28,10,28,12,28,200,9,28,1,28,1,28,1,29,1,
        29,1,29,1,30,4,30,208,8,30,11,30,12,30,209,1,31,4,31,213,8,31,11,
        31,12,31,214,1,31,1,31,1,82,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,1,0,10,2,0,10,10,13,13,1,0,48,50,1,0,48,57,1,0,48,
        49,1,0,49,57,1,0,46,46,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,39,39,3,0,9,10,12,13,32,32,230,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,1,65,1,0,0,0,3,76,1,0,0,0,5,90,1,0,0,0,7,93,1,0,0,0,9,103,1,0,
        0,0,11,105,1,0,0,0,13,108,1,0,0,0,15,112,1,0,0,0,17,114,1,0,0,0,
        19,116,1,0,0,0,21,118,1,0,0,0,23,120,1,0,0,0,25,122,1,0,0,0,27,125,
        1,0,0,0,29,127,1,0,0,0,31,129,1,0,0,0,33,131,1,0,0,0,35,133,1,0,
        0,0,37,135,1,0,0,0,39,137,1,0,0,0,41,139,1,0,0,0,43,141,1,0,0,0,
        45,143,1,0,0,0,47,145,1,0,0,0,49,151,1,0,0,0,51,181,1,0,0,0,53,183,
        1,0,0,0,55,187,1,0,0,0,57,194,1,0,0,0,59,203,1,0,0,0,61,207,1,0,
        0,0,63,212,1,0,0,0,65,66,5,47,0,0,66,67,5,47,0,0,67,71,1,0,0,0,68,
        70,8,0,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,
        0,72,74,1,0,0,0,73,71,1,0,0,0,74,75,6,0,0,0,75,2,1,0,0,0,76,77,5,
        47,0,0,77,78,5,42,0,0,78,82,1,0,0,0,79,81,9,0,0,0,80,79,1,0,0,0,
        81,84,1,0,0,0,82,83,1,0,0,0,82,80,1,0,0,0,83,85,1,0,0,0,84,82,1,
        0,0,0,85,86,5,42,0,0,86,87,5,47,0,0,87,88,1,0,0,0,88,89,6,1,0,0,
        89,4,1,0,0,0,90,91,5,105,0,0,91,92,5,110,0,0,92,6,1,0,0,0,93,94,
        5,97,0,0,94,95,5,110,0,0,95,96,5,100,0,0,96,8,1,0,0,0,97,98,5,116,
        0,0,98,99,5,104,0,0,99,100,5,101,0,0,100,104,5,110,0,0,101,102,5,
        45,0,0,102,104,5,62,0,0,103,97,1,0,0,0,103,101,1,0,0,0,104,10,1,
        0,0,0,105,106,5,111,0,0,106,107,5,114,0,0,107,12,1,0,0,0,108,109,
        5,110,0,0,109,110,5,111,0,0,110,111,5,116,0,0,111,14,1,0,0,0,112,
        113,5,61,0,0,113,16,1,0,0,0,114,115,5,44,0,0,115,18,1,0,0,0,116,
        117,5,59,0,0,117,20,1,0,0,0,118,119,5,40,0,0,119,22,1,0,0,0,120,
        121,5,41,0,0,121,24,1,0,0,0,122,123,5,116,0,0,123,124,5,111,0,0,
        124,26,1,0,0,0,125,126,5,43,0,0,126,28,1,0,0,0,127,128,5,45,0,0,
        128,30,1,0,0,0,129,130,5,42,0,0,130,32,1,0,0,0,131,132,5,47,0,0,
        132,34,1,0,0,0,133,134,5,62,0,0,134,36,1,0,0,0,135,136,5,60,0,0,
        136,38,1,0,0,0,137,138,5,91,0,0,138,40,1,0,0,0,139,140,5,93,0,0,
        140,42,1,0,0,0,141,142,5,126,0,0,142,44,1,0,0,0,143,144,5,36,0,0,
        144,46,1,0,0,0,145,146,5,163,0,0,146,48,1,0,0,0,147,148,7,1,0,0,
        148,152,7,2,0,0,149,150,5,51,0,0,150,152,7,3,0,0,151,147,1,0,0,0,
        151,149,1,0,0,0,152,153,1,0,0,0,153,161,5,47,0,0,154,155,5,48,0,
        0,155,162,7,2,0,0,156,157,5,49,0,0,157,158,5,49,0,0,158,159,1,0,
        0,0,159,160,5,49,0,0,160,162,5,50,0,0,161,154,1,0,0,0,161,156,1,
        0,0,0,162,163,1,0,0,0,163,164,5,47,0,0,164,165,7,2,0,0,165,168,7,
        2,0,0,166,167,7,2,0,0,167,169,7,2,0,0,168,166,1,0,0,0,168,169,1,
        0,0,0,169,50,1,0,0,0,170,172,3,29,14,0,171,170,1,0,0,0,171,172,1,
        0,0,0,172,173,1,0,0,0,173,177,7,4,0,0,174,176,7,2,0,0,175,174,1,
        0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,182,1,
        0,0,0,179,177,1,0,0,0,180,182,5,48,0,0,181,171,1,0,0,0,181,180,1,
        0,0,0,182,52,1,0,0,0,183,184,3,51,25,0,184,185,7,5,0,0,185,186,3,
        51,25,0,186,54,1,0,0,0,187,191,7,6,0,0,188,190,7,7,0,0,189,188,1,
        0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,56,1,0,
        0,0,193,191,1,0,0,0,194,198,5,39,0,0,195,197,8,8,0,0,196,195,1,0,
        0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,
        0,0,200,198,1,0,0,0,201,202,5,39,0,0,202,58,1,0,0,0,203,204,5,46,
        0,0,204,205,5,46,0,0,205,60,1,0,0,0,206,208,7,0,0,0,207,206,1,0,
        0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,62,1,0,0,
        0,211,213,7,9,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,
        0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,6,31,0,0,217,64,1,0,0,
        0,14,0,71,82,103,151,161,168,171,177,181,191,198,209,214,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SINGLE_COMMENT = 1
    MULTILINE_COMMENT = 2
    IN = 3
    AND = 4
    THEN = 5
    OR = 6
    NOT = 7
    EQ = 8
    COMMA = 9
    SEMI = 10
    LPAREN = 11
    RPAREN = 12
    TO = 13
    PLUS = 14
    MINUS = 15
    TIMES = 16
    DIVIDE = 17
    GREATER_THAN = 18
    LESS_THAN = 19
    LSQPAREN = 20
    RSQPAREN = 21
    VERSUS = 22
    DOLLAR = 23
    POUND = 24
    SLASH_DATE = 25
    INT = 26
    FLOAT = 27
    WORD = 28
    BRACKET_ID = 29
    DOTS = 30
    NL = 31
    WS_SKIP = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'in'", "'and'", "'or'", "'not'", "'='", "','", "';'", "'('", 
            "')'", "'to'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'['", 
            "']'", "'~'", "'$'", "'\\u00A3'", "'..'" ]

    symbolicNames = [ "<INVALID>",
            "SINGLE_COMMENT", "MULTILINE_COMMENT", "IN", "AND", "THEN", 
            "OR", "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", "TO", 
            "PLUS", "MINUS", "TIMES", "DIVIDE", "GREATER_THAN", "LESS_THAN", 
            "LSQPAREN", "RSQPAREN", "VERSUS", "DOLLAR", "POUND", "SLASH_DATE", 
            "INT", "FLOAT", "WORD", "BRACKET_ID", "DOTS", "NL", "WS_SKIP" ]

    ruleNames = [ "SINGLE_COMMENT", "MULTILINE_COMMENT", "IN", "AND", "THEN", 
                  "OR", "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", 
                  "TO", "PLUS", "MINUS", "TIMES", "DIVIDE", "GREATER_THAN", 
                  "LESS_THAN", "LSQPAREN", "RSQPAREN", "VERSUS", "DOLLAR", 
                  "POUND", "SLASH_DATE", "INT", "FLOAT", "WORD", "BRACKET_ID", 
                  "DOTS", "NL", "WS_SKIP" ]

    grammarFileName = "ExprLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


