# Generated from ExprLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,291,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,5,0,82,8,0,10,0,12,0,85,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,93,8,
        1,10,1,12,1,96,9,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,
        3,1,3,1,3,1,3,3,3,113,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,
        7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,
        13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,
        20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,163,
        8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,25,1,25,3,25,183,8,25,1,26,1,26,1,26,1,26,
        1,26,1,26,3,26,191,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        3,27,201,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,211,8,
        28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,219,8,29,1,30,1,30,1,30,1,
        30,3,30,225,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,235,
        8,30,1,30,1,30,1,30,1,30,1,30,3,30,242,8,30,1,31,3,31,245,8,31,1,
        31,1,31,5,31,249,8,31,10,31,12,31,252,9,31,1,31,3,31,255,8,31,1,
        32,1,32,1,32,1,32,1,33,1,33,5,33,263,8,33,10,33,12,33,266,9,33,1,
        34,1,34,5,34,270,8,34,10,34,12,34,273,9,34,1,34,1,34,1,35,1,35,1,
        35,1,36,4,36,281,8,36,11,36,12,36,282,1,36,1,36,1,37,4,37,288,8,
        37,11,37,12,37,289,1,94,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,1,0,10,2,0,10,10,
        13,13,1,0,48,50,1,0,48,57,1,0,48,49,1,0,49,57,1,0,46,46,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,39,39,3,0,9,10,12,
        13,32,32,309,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,88,
        1,0,0,0,5,102,1,0,0,0,7,112,1,0,0,0,9,114,1,0,0,0,11,117,1,0,0,0,
        13,121,1,0,0,0,15,123,1,0,0,0,17,125,1,0,0,0,19,127,1,0,0,0,21,129,
        1,0,0,0,23,131,1,0,0,0,25,134,1,0,0,0,27,136,1,0,0,0,29,138,1,0,
        0,0,31,140,1,0,0,0,33,142,1,0,0,0,35,144,1,0,0,0,37,146,1,0,0,0,
        39,148,1,0,0,0,41,150,1,0,0,0,43,153,1,0,0,0,45,155,1,0,0,0,47,157,
        1,0,0,0,49,164,1,0,0,0,51,176,1,0,0,0,53,184,1,0,0,0,55,192,1,0,
        0,0,57,202,1,0,0,0,59,212,1,0,0,0,61,224,1,0,0,0,63,254,1,0,0,0,
        65,256,1,0,0,0,67,260,1,0,0,0,69,267,1,0,0,0,71,276,1,0,0,0,73,280,
        1,0,0,0,75,287,1,0,0,0,77,78,5,47,0,0,78,79,5,47,0,0,79,83,1,0,0,
        0,80,82,8,0,0,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,
        1,0,0,0,84,86,1,0,0,0,85,83,1,0,0,0,86,87,6,0,0,0,87,2,1,0,0,0,88,
        89,5,47,0,0,89,90,5,42,0,0,90,94,1,0,0,0,91,93,9,0,0,0,92,91,1,0,
        0,0,93,96,1,0,0,0,94,95,1,0,0,0,94,92,1,0,0,0,95,97,1,0,0,0,96,94,
        1,0,0,0,97,98,5,42,0,0,98,99,5,47,0,0,99,100,1,0,0,0,100,101,6,1,
        0,0,101,4,1,0,0,0,102,103,5,97,0,0,103,104,5,110,0,0,104,105,5,100,
        0,0,105,6,1,0,0,0,106,107,5,116,0,0,107,108,5,104,0,0,108,109,5,
        101,0,0,109,113,5,110,0,0,110,111,5,45,0,0,111,113,5,62,0,0,112,
        106,1,0,0,0,112,110,1,0,0,0,113,8,1,0,0,0,114,115,5,111,0,0,115,
        116,5,114,0,0,116,10,1,0,0,0,117,118,5,110,0,0,118,119,5,111,0,0,
        119,120,5,116,0,0,120,12,1,0,0,0,121,122,5,61,0,0,122,14,1,0,0,0,
        123,124,5,44,0,0,124,16,1,0,0,0,125,126,5,59,0,0,126,18,1,0,0,0,
        127,128,5,40,0,0,128,20,1,0,0,0,129,130,5,41,0,0,130,22,1,0,0,0,
        131,132,5,116,0,0,132,133,5,111,0,0,133,24,1,0,0,0,134,135,5,43,
        0,0,135,26,1,0,0,0,136,137,5,45,0,0,137,28,1,0,0,0,138,139,5,42,
        0,0,139,30,1,0,0,0,140,141,5,47,0,0,141,32,1,0,0,0,142,143,5,62,
        0,0,143,34,1,0,0,0,144,145,5,60,0,0,145,36,1,0,0,0,146,147,5,91,
        0,0,147,38,1,0,0,0,148,149,5,93,0,0,149,40,1,0,0,0,150,151,5,118,
        0,0,151,152,5,115,0,0,152,42,1,0,0,0,153,154,5,36,0,0,154,44,1,0,
        0,0,155,156,5,163,0,0,156,46,1,0,0,0,157,158,5,100,0,0,158,159,5,
        97,0,0,159,160,5,121,0,0,160,162,1,0,0,0,161,163,5,115,0,0,162,161,
        1,0,0,0,162,163,1,0,0,0,163,48,1,0,0,0,164,165,5,98,0,0,165,166,
        5,117,0,0,166,167,5,115,0,0,167,168,5,105,0,0,168,169,5,110,0,0,
        169,170,5,101,0,0,170,171,5,115,0,0,171,172,5,115,0,0,172,173,5,
        32,0,0,173,174,1,0,0,0,174,175,3,47,23,0,175,50,1,0,0,0,176,177,
        5,119,0,0,177,178,5,101,0,0,178,179,5,101,0,0,179,180,5,107,0,0,
        180,182,1,0,0,0,181,183,5,115,0,0,182,181,1,0,0,0,182,183,1,0,0,
        0,183,52,1,0,0,0,184,185,5,104,0,0,185,186,5,111,0,0,186,187,5,117,
        0,0,187,188,5,114,0,0,188,190,1,0,0,0,189,191,5,115,0,0,190,189,
        1,0,0,0,190,191,1,0,0,0,191,54,1,0,0,0,192,193,5,109,0,0,193,194,
        5,105,0,0,194,195,5,110,0,0,195,196,5,117,0,0,196,197,5,116,0,0,
        197,198,5,101,0,0,198,200,1,0,0,0,199,201,5,115,0,0,200,199,1,0,
        0,0,200,201,1,0,0,0,201,56,1,0,0,0,202,203,5,115,0,0,203,204,5,101,
        0,0,204,205,5,99,0,0,205,206,5,111,0,0,206,207,5,110,0,0,207,208,
        5,100,0,0,208,210,1,0,0,0,209,211,5,115,0,0,210,209,1,0,0,0,210,
        211,1,0,0,0,211,58,1,0,0,0,212,213,5,121,0,0,213,214,5,101,0,0,214,
        215,5,97,0,0,215,216,5,114,0,0,216,218,1,0,0,0,217,219,5,115,0,0,
        218,217,1,0,0,0,218,219,1,0,0,0,219,60,1,0,0,0,220,221,7,1,0,0,221,
        225,7,2,0,0,222,223,5,51,0,0,223,225,7,3,0,0,224,220,1,0,0,0,224,
        222,1,0,0,0,225,226,1,0,0,0,226,234,5,47,0,0,227,228,5,48,0,0,228,
        235,7,2,0,0,229,230,5,49,0,0,230,231,5,49,0,0,231,232,1,0,0,0,232,
        233,5,49,0,0,233,235,5,50,0,0,234,227,1,0,0,0,234,229,1,0,0,0,235,
        236,1,0,0,0,236,237,5,47,0,0,237,238,7,2,0,0,238,241,7,2,0,0,239,
        240,7,2,0,0,240,242,7,2,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,
        62,1,0,0,0,243,245,3,27,13,0,244,243,1,0,0,0,244,245,1,0,0,0,245,
        246,1,0,0,0,246,250,7,4,0,0,247,249,7,2,0,0,248,247,1,0,0,0,249,
        252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,255,1,0,0,0,252,
        250,1,0,0,0,253,255,5,48,0,0,254,244,1,0,0,0,254,253,1,0,0,0,255,
        64,1,0,0,0,256,257,3,63,31,0,257,258,7,5,0,0,258,259,3,63,31,0,259,
        66,1,0,0,0,260,264,7,6,0,0,261,263,7,7,0,0,262,261,1,0,0,0,263,266,
        1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,68,1,0,0,0,266,264,1,
        0,0,0,267,271,5,39,0,0,268,270,8,8,0,0,269,268,1,0,0,0,270,273,1,
        0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,271,1,
        0,0,0,274,275,5,39,0,0,275,70,1,0,0,0,276,277,5,46,0,0,277,278,5,
        46,0,0,278,72,1,0,0,0,279,281,7,9,0,0,280,279,1,0,0,0,281,282,1,
        0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,285,6,
        36,0,0,285,74,1,0,0,0,286,288,7,0,0,0,287,286,1,0,0,0,288,289,1,
        0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,76,1,0,0,0,20,0,83,94,
        112,162,182,190,200,210,218,224,234,241,244,250,254,264,271,282,
        289,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SINGLE_COMMENT = 1
    MULTILINE_COMMENT = 2
    AND = 3
    THEN = 4
    OR = 5
    NOT = 6
    EQ = 7
    COMMA = 8
    SEMI = 9
    LPAREN = 10
    RPAREN = 11
    TO = 12
    PLUS = 13
    MINUS = 14
    TIMES = 15
    DIVIDE = 16
    GREATER_THAN = 17
    LESS_THAN = 18
    LSQPAREN = 19
    RSQPAREN = 20
    VERSUS = 21
    DOLLAR = 22
    POUND = 23
    DAYS = 24
    BUSINESS_DAYS = 25
    WEEKS = 26
    HOURS = 27
    MINUTES = 28
    SECONDS = 29
    YEARS = 30
    SLASH_DATE = 31
    INT = 32
    FLOAT = 33
    ID = 34
    BRACKET_ID = 35
    DOTS = 36
    WS = 37
    NL = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'='", "','", "';'", "'('", "')'", 
            "'to'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'['", "']'", 
            "'vs'", "'$'", "'\\u00A3'", "'..'" ]

    symbolicNames = [ "<INVALID>",
            "SINGLE_COMMENT", "MULTILINE_COMMENT", "AND", "THEN", "OR", 
            "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", "TO", "PLUS", 
            "MINUS", "TIMES", "DIVIDE", "GREATER_THAN", "LESS_THAN", "LSQPAREN", 
            "RSQPAREN", "VERSUS", "DOLLAR", "POUND", "DAYS", "BUSINESS_DAYS", 
            "WEEKS", "HOURS", "MINUTES", "SECONDS", "YEARS", "SLASH_DATE", 
            "INT", "FLOAT", "ID", "BRACKET_ID", "DOTS", "WS", "NL" ]

    ruleNames = [ "SINGLE_COMMENT", "MULTILINE_COMMENT", "AND", "THEN", 
                  "OR", "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", 
                  "TO", "PLUS", "MINUS", "TIMES", "DIVIDE", "GREATER_THAN", 
                  "LESS_THAN", "LSQPAREN", "RSQPAREN", "VERSUS", "DOLLAR", 
                  "POUND", "DAYS", "BUSINESS_DAYS", "WEEKS", "HOURS", "MINUTES", 
                  "SECONDS", "YEARS", "SLASH_DATE", "INT", "FLOAT", "ID", 
                  "BRACKET_ID", "DOTS", "WS", "NL" ]

    grammarFileName = "ExprLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


