# Generated from ExprLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,220,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,0,5,0,70,8,0,10,0,12,0,73,9,0,1,0,1,0,1,1,1,1,1,1,1,1,5,
        1,81,8,1,10,1,12,1,84,9,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,3,3,101,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,148,8,22,
        1,23,1,23,1,23,1,23,1,23,1,23,3,23,156,8,23,1,24,1,24,1,24,1,24,
        1,24,1,24,3,24,164,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        3,25,174,8,25,1,26,3,26,177,8,26,1,26,1,26,5,26,181,8,26,10,26,12,
        26,184,9,26,1,26,3,26,187,8,26,1,27,1,27,1,27,1,27,1,28,1,28,5,28,
        195,8,28,10,28,12,28,198,9,28,1,29,1,29,5,29,202,8,29,10,29,12,29,
        205,9,29,1,29,1,29,1,30,4,30,210,8,30,11,30,12,30,211,1,30,1,30,
        1,31,4,31,217,8,31,11,31,12,31,218,1,82,0,32,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,1,0,8,2,0,10,10,13,13,1,0,49,57,1,0,48,
        57,1,0,46,46,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,39,39,3,0,9,10,12,13,32,32,233,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,
        0,0,3,76,1,0,0,0,5,90,1,0,0,0,7,100,1,0,0,0,9,102,1,0,0,0,11,105,
        1,0,0,0,13,109,1,0,0,0,15,111,1,0,0,0,17,113,1,0,0,0,19,115,1,0,
        0,0,21,117,1,0,0,0,23,119,1,0,0,0,25,122,1,0,0,0,27,124,1,0,0,0,
        29,126,1,0,0,0,31,128,1,0,0,0,33,130,1,0,0,0,35,132,1,0,0,0,37,134,
        1,0,0,0,39,136,1,0,0,0,41,138,1,0,0,0,43,140,1,0,0,0,45,142,1,0,
        0,0,47,149,1,0,0,0,49,157,1,0,0,0,51,165,1,0,0,0,53,186,1,0,0,0,
        55,188,1,0,0,0,57,192,1,0,0,0,59,199,1,0,0,0,61,209,1,0,0,0,63,216,
        1,0,0,0,65,66,5,47,0,0,66,67,5,47,0,0,67,71,1,0,0,0,68,70,8,0,0,
        0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,74,
        1,0,0,0,73,71,1,0,0,0,74,75,6,0,0,0,75,2,1,0,0,0,76,77,5,47,0,0,
        77,78,5,42,0,0,78,82,1,0,0,0,79,81,9,0,0,0,80,79,1,0,0,0,81,84,1,
        0,0,0,82,83,1,0,0,0,82,80,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,
        86,5,42,0,0,86,87,5,47,0,0,87,88,1,0,0,0,88,89,6,1,0,0,89,4,1,0,
        0,0,90,91,5,97,0,0,91,92,5,110,0,0,92,93,5,100,0,0,93,6,1,0,0,0,
        94,95,5,116,0,0,95,96,5,104,0,0,96,97,5,101,0,0,97,101,5,110,0,0,
        98,99,5,45,0,0,99,101,5,62,0,0,100,94,1,0,0,0,100,98,1,0,0,0,101,
        8,1,0,0,0,102,103,5,111,0,0,103,104,5,114,0,0,104,10,1,0,0,0,105,
        106,5,110,0,0,106,107,5,111,0,0,107,108,5,116,0,0,108,12,1,0,0,0,
        109,110,5,61,0,0,110,14,1,0,0,0,111,112,5,44,0,0,112,16,1,0,0,0,
        113,114,5,59,0,0,114,18,1,0,0,0,115,116,5,40,0,0,116,20,1,0,0,0,
        117,118,5,41,0,0,118,22,1,0,0,0,119,120,5,116,0,0,120,121,5,111,
        0,0,121,24,1,0,0,0,122,123,5,43,0,0,123,26,1,0,0,0,124,125,5,45,
        0,0,125,28,1,0,0,0,126,127,5,42,0,0,127,30,1,0,0,0,128,129,5,47,
        0,0,129,32,1,0,0,0,130,131,5,62,0,0,131,34,1,0,0,0,132,133,5,60,
        0,0,133,36,1,0,0,0,134,135,5,91,0,0,135,38,1,0,0,0,136,137,5,93,
        0,0,137,40,1,0,0,0,138,139,5,36,0,0,139,42,1,0,0,0,140,141,5,163,
        0,0,141,44,1,0,0,0,142,143,5,100,0,0,143,144,5,97,0,0,144,145,5,
        121,0,0,145,147,1,0,0,0,146,148,5,115,0,0,147,146,1,0,0,0,147,148,
        1,0,0,0,148,46,1,0,0,0,149,150,5,119,0,0,150,151,5,101,0,0,151,152,
        5,101,0,0,152,153,5,107,0,0,153,155,1,0,0,0,154,156,5,115,0,0,155,
        154,1,0,0,0,155,156,1,0,0,0,156,48,1,0,0,0,157,158,5,104,0,0,158,
        159,5,111,0,0,159,160,5,117,0,0,160,161,5,114,0,0,161,163,1,0,0,
        0,162,164,5,115,0,0,163,162,1,0,0,0,163,164,1,0,0,0,164,50,1,0,0,
        0,165,166,5,109,0,0,166,167,5,105,0,0,167,168,5,110,0,0,168,169,
        5,117,0,0,169,170,5,116,0,0,170,171,5,101,0,0,171,173,1,0,0,0,172,
        174,5,115,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,52,1,0,0,0,175,
        177,3,27,13,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,
        182,7,1,0,0,179,181,7,2,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,
        180,1,0,0,0,182,183,1,0,0,0,183,187,1,0,0,0,184,182,1,0,0,0,185,
        187,5,48,0,0,186,176,1,0,0,0,186,185,1,0,0,0,187,54,1,0,0,0,188,
        189,3,53,26,0,189,190,7,3,0,0,190,191,3,53,26,0,191,56,1,0,0,0,192,
        196,7,4,0,0,193,195,7,5,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,
        194,1,0,0,0,196,197,1,0,0,0,197,58,1,0,0,0,198,196,1,0,0,0,199,203,
        5,39,0,0,200,202,8,6,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,
        1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,
        5,39,0,0,207,60,1,0,0,0,208,210,7,7,0,0,209,208,1,0,0,0,210,211,
        1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,214,
        6,30,0,0,214,62,1,0,0,0,215,217,7,0,0,0,216,215,1,0,0,0,217,218,
        1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,64,1,0,0,0,15,0,71,82,
        100,147,155,163,173,176,182,186,196,203,211,218,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SINGLE_COMMENT = 1
    MULTILINE_COMMENT = 2
    AND = 3
    THEN = 4
    OR = 5
    NOT = 6
    EQ = 7
    COMMA = 8
    SEMI = 9
    LPAREN = 10
    RPAREN = 11
    TO = 12
    PLUS = 13
    MINUS = 14
    TIMES = 15
    DIVIDE = 16
    GREATER_THAN = 17
    LESS_THAN = 18
    LSQPAREN = 19
    RSQPAREN = 20
    DOLLAR = 21
    POUND = 22
    DAYS = 23
    WEEKS = 24
    HOURS = 25
    MINUTES = 26
    INT = 27
    FLOAT = 28
    ID = 29
    BRACKET_ID = 30
    WS = 31
    NL = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'='", "','", "';'", "'('", "')'", 
            "'to'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'['", "']'", 
            "'$'", "'\\u00A3'" ]

    symbolicNames = [ "<INVALID>",
            "SINGLE_COMMENT", "MULTILINE_COMMENT", "AND", "THEN", "OR", 
            "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", "TO", "PLUS", 
            "MINUS", "TIMES", "DIVIDE", "GREATER_THAN", "LESS_THAN", "LSQPAREN", 
            "RSQPAREN", "DOLLAR", "POUND", "DAYS", "WEEKS", "HOURS", "MINUTES", 
            "INT", "FLOAT", "ID", "BRACKET_ID", "WS", "NL" ]

    ruleNames = [ "SINGLE_COMMENT", "MULTILINE_COMMENT", "AND", "THEN", 
                  "OR", "NOT", "EQ", "COMMA", "SEMI", "LPAREN", "RPAREN", 
                  "TO", "PLUS", "MINUS", "TIMES", "DIVIDE", "GREATER_THAN", 
                  "LESS_THAN", "LSQPAREN", "RSQPAREN", "DOLLAR", "POUND", 
                  "DAYS", "WEEKS", "HOURS", "MINUTES", "INT", "FLOAT", "ID", 
                  "BRACKET_ID", "WS", "NL" ]

    grammarFileName = "ExprLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


